{
  "_snapshotter": {
    "_snapshot_dir": "~/nta/results_4",
    "_snapshot_mode": "none",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 1,
  "_train_args": {
    "n_epochs": 3000,
    "batch_size": 5000,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "_qf1": {
      "_dim_context": 10,
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 39.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "preprocess_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "linear_layer": {
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 64,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
            },
            "nonlinearity": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.Sequential"
        },
        "_dendrite_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 43.0,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            },
            "1": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 512,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_dendrite_activations": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "output_linear": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 512,
                      "out_features": 1,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "num_segments": 1,
      "input_size": 43.0,
      "hidden_sizes": [
        512,
        512
      ],
      "output_sizes": [
        1
      ],
      "dim_context": 10,
      "kw": false,
      "kw_percent_on": "None",
      "weight_sparsity": 0.0,
      "output_nonlinearity": "None",
      "hardcode_dendrites": false,
      "_single_head": true,
      "representation_dim": 43.0,
      "representation_module": "None",
      "context_representation_dim": 64,
      "$type": "nupic.embodied.q_functions.continuous_dendrite_mlp_q_function.ContinuousDendriteMLPQFunction"
    },
    "_qf2": {
      "_dim_context": 10,
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 39.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "preprocess_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "linear_layer": {
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 64,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
            },
            "nonlinearity": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.Sequential"
        },
        "_dendrite_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 43.0,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            },
            "1": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 512,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_dendrite_activations": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "output_linear": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 512,
                      "out_features": 1,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "num_segments": 1,
      "input_size": 43.0,
      "hidden_sizes": [
        512,
        512
      ],
      "output_sizes": [
        1
      ],
      "dim_context": 10,
      "kw": false,
      "kw_percent_on": "None",
      "weight_sparsity": 0.0,
      "output_nonlinearity": "None",
      "hardcode_dendrites": false,
      "_single_head": true,
      "representation_dim": 43.0,
      "representation_module": "None",
      "context_representation_dim": 64,
      "$type": "nupic.embodied.q_functions.continuous_dendrite_mlp_q_function.ContinuousDendriteMLPQFunction"
    },
    "replay_buffer": {
      "_capacity": 1000000,
      "_env_spec": "None",
      "_transitions_stored": 0,
      "_first_idx_of_next_path": 0,
      "_path_segments": [],
      "_buffer": {},
      "$type": "garage.replay_buffer.path_buffer.PathBuffer"
    },
    "_tau": 0.005,
    "_policy_lr": 0.0005,
    "_qf_lr": 0.0005,
    "_initial_log_entropy": 0.0,
    "_gradient_steps": 1,
    "_optimizer": {
      "$typename": "torch.optim.adam.Adam"
    },
    "_num_evaluation_episodes": 5,
    "_eval_env": "None",
    "_min_buffer_size": 5000,
    "_steps_per_epoch": 1,
    "_buffer_batch_size": 1280,
    "_discount": 0.99,
    "_reward_scale": 1.0,
    "max_episode_length": 500,
    "_max_episode_length_eval": 500,
    "_use_deterministic_evaluation": true,
    "policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_log_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            },
            "max_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_shared_mean_log_std_network": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "preprocess_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear_layer": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 49.0,
                          "out_features": 64,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                    },
                    "nonlinearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                },
                "_dendrite_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "dim_context": 64,
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 39.0,
                          "out_features": 512,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "segments": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": "None"
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 64,
                              "out_features": 512,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                    },
                    "1": {
                      "dim_context": 64,
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 512,
                          "out_features": 512,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "segments": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": "None"
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 64,
                              "out_features": 512,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_dendrite_activations": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "output_linear": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 512,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "output_linear": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 512,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "num_segments": 1,
              "input_size": 39.0,
              "hidden_sizes": [
                512,
                512
              ],
              "output_sizes": [
                4.0,
                4.0
              ],
              "dim_context": 10,
              "kw": false,
              "kw_percent_on": "None",
              "weight_sparsity": 0.0,
              "output_nonlinearity": "None",
              "hardcode_dendrites": false,
              "_single_head": false,
              "representation_dim": 39.0,
              "representation_module": "None",
              "context_representation_dim": 64,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_mlp.DendriticMLP"
            }
          },
          "_input_dim": 39.0,
          "_hidden_sizes": [
            512,
            512
          ],
          "_action_dim": 4.0,
          "_learn_std": true,
          "_std_hidden_sizes": "None",
          "_min_std": 2.061153622438558e-09,
          "_max_std": 7.38905609893065,
          "_std_hidden_nonlinearity": "None",
          "_std_hidden_w_init": "None",
          "_std_hidden_b_init": "None",
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": "None",
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "None",
          "_hidden_w_init": "None",
          "_hidden_b_init": "None",
          "_output_nonlinearity": "None",
          "_output_w_init": "None",
          "_output_b_init": "None",
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
          },
          "_init_std": {
            "$type": "torch.Tensor"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": {
            "$type": "torch.Tensor"
          },
          "_n_tasks": 10,
          "$type": "nupic.embodied.modules.gaussian_mlp_module.GaussianTwoHeadedDendriticMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianPolicy",
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "_input_dim": 39.0,
      "$type": "nupic.embodied.policies.gaussian_mlp_policy.GaussianDendriticMLPPolicy"
    },
    "env_spec": {
      "max_episode_length": 500,
      "input_space": {
        "dtype": "dtype('float32')",
        "shape": [
          4
        ],
        "low": "array([-1., -1., -1., -1.], dtype=float32)",
        "high": "array([1., 1., 1., 1.], dtype=float32)",
        "bounded_below": "array([ True,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "shape": [
          49
        ],
        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_sampler": {
      "_worker_factory": {
        "n_workers": 10,
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_sampler_worker": {
        "__ray_metadata__": "<ray.actor.ActorClassMetadata object at 0x7ff304ca40d0>",
        "$type": "garage.sampler.ray_sampler.ActorClass(SamplerWorker)"
      },
      "_agents": {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "preprocess_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear_layer": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 64,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                      },
                      "nonlinearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "_dendrite_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "dim_context": 64,
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 39.0,
                            "out_features": 512,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "segments": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": "None"
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 64,
                                "out_features": 512,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                      },
                      "1": {
                        "dim_context": 64,
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 512,
                            "out_features": 512,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "segments": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": "None"
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 64,
                                "out_features": 512,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_dendrite_activations": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "output_linear": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 512,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "output_linear": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 512,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "num_segments": 1,
                "input_size": 39.0,
                "hidden_sizes": [
                  512,
                  512
                ],
                "output_sizes": [
                  4.0,
                  4.0
                ],
                "dim_context": 10,
                "kw": false,
                "kw_percent_on": "None",
                "weight_sparsity": 0.0,
                "output_nonlinearity": "None",
                "hardcode_dendrites": false,
                "_single_head": false,
                "representation_dim": 39.0,
                "representation_module": "None",
                "context_representation_dim": 64,
                "$type": "nupic.research.frameworks.dendrites.modules.dendritic_mlp.DendriticMLP"
              }
            },
            "_input_dim": 39.0,
            "_hidden_sizes": [
              512,
              512
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": "None",
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "None",
            "_std_hidden_w_init": "None",
            "_std_hidden_b_init": "None",
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": "None",
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "None",
            "_hidden_w_init": "None",
            "_hidden_b_init": "None",
            "_output_nonlinearity": "None",
            "_output_w_init": "None",
            "_output_b_init": "None",
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "_n_tasks": 10,
            "$type": "nupic.embodied.modules.gaussian_mlp_module.GaussianTwoHeadedDendriticMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "_input_dim": 39.0,
        "$type": "nupic.embodied.policies.gaussian_mlp_policy.GaussianDendriticMLPPolicy"
      },
      "_envs": [
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        }
      ],
      "_all_workers": {
        "0": "Actor(SamplerWorker, 45b95b1c0100)",
        "1": "Actor(SamplerWorker, ef0a6c220100)",
        "2": "Actor(SamplerWorker, f66d17ba0100)",
        "3": "Actor(SamplerWorker, 44ee453c0100)",
        "4": "Actor(SamplerWorker, 7e0a4dfc0100)",
        "5": "Actor(SamplerWorker, 6f53dca10100)",
        "6": "Actor(SamplerWorker, 6170691e0100)",
        "7": "Actor(SamplerWorker, cd8f56890100)",
        "8": "Actor(SamplerWorker, 55c3b2b60100)",
        "9": "Actor(SamplerWorker, 9fc77bf30100)"
      },
      "_workers_started": true,
      "total_env_steps": 0,
      "$type": "garage.sampler.ray_sampler.RaySampler"
    },
    "_target_qf1": {
      "_dim_context": 10,
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 39.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "preprocess_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "linear_layer": {
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 64,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
            },
            "nonlinearity": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.Sequential"
        },
        "_dendrite_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 43.0,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            },
            "1": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 512,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_dendrite_activations": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "output_linear": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 512,
                      "out_features": 1,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "num_segments": 1,
      "input_size": 43.0,
      "hidden_sizes": [
        512,
        512
      ],
      "output_sizes": [
        1
      ],
      "dim_context": 10,
      "kw": false,
      "kw_percent_on": "None",
      "weight_sparsity": 0.0,
      "output_nonlinearity": "None",
      "hardcode_dendrites": false,
      "_single_head": true,
      "representation_dim": 43.0,
      "representation_module": "None",
      "context_representation_dim": 64,
      "$type": "nupic.embodied.q_functions.continuous_dendrite_mlp_q_function.ContinuousDendriteMLPQFunction"
    },
    "_target_qf2": {
      "_dim_context": 10,
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 39.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "preprocess_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "linear_layer": {
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 64,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
            },
            "nonlinearity": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.Sequential"
        },
        "_dendrite_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 43.0,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            },
            "1": {
              "dim_context": 64,
              "training": true,
              "_parameters": {},
              "_buffers": {
                "zero_mask": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "module": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 512,
                  "out_features": 512,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "segments": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": "None"
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 64,
                      "out_features": 512,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "sparsity": 0.0,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_dendrite_activations": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {},
              "inplace": false,
              "$type": "torch.nn.modules.activation.ReLU"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "output_linear": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {
                    "zero_mask": {
                      "$type": "torch.Tensor"
                    }
                  },
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "module": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 512,
                      "out_features": 1,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "sparsity": 0.0,
                  "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "num_segments": 1,
      "input_size": 43.0,
      "hidden_sizes": [
        512,
        512
      ],
      "output_sizes": [
        1
      ],
      "dim_context": 10,
      "kw": false,
      "kw_percent_on": "None",
      "weight_sparsity": 0.0,
      "output_nonlinearity": "None",
      "hardcode_dendrites": false,
      "_single_head": true,
      "representation_dim": 43.0,
      "representation_module": "None",
      "context_representation_dim": 64,
      "$type": "nupic.embodied.q_functions.continuous_dendrite_mlp_q_function.ContinuousDendriteMLPQFunction"
    },
    "_policy_optimizer": {
      "defaults": {
        "lr": 0.0005,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "lr": 0.0005,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false,
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ]
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_qf1_optimizer": {
      "defaults": {
        "lr": 0.0005,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "lr": 0.0005,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false,
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ]
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_qf2_optimizer": {
      "defaults": {
        "lr": 0.0005,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "lr": 0.0005,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false,
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ]
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_use_automatic_entropy_tuning": true,
    "_fixed_alpha": "None",
    "_target_entropy": -4,
    "_log_alpha": {
      "$type": "torch.Tensor"
    },
    "_alpha_optimizer": {
      "defaults": {
        "lr": 0.0005,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.Tensor"
            }
          ],
          "lr": 0.0005,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "episode_rewards": [],
    "_train_task_sampler": {
      "_benchmark": {
        "_train_classes": {
          "reach-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
          },
          "push-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
          },
          "pick-place-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "door-open-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
          },
          "drawer-open-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
          },
          "drawer-close-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
          },
          "button-press-topdown-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
          },
          "peg-insert-side-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
          },
          "window-open-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
          },
          "window-close-v2": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
          }
        },
        "_test_classes": {},
        "_train_tasks": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "_test_tasks": [],
        "$type": "metaworld.MT10"
      },
      "_kind": "train",
      "_inner_wrapper": "None",
      "_add_env_onehot": true,
      "_classes": {
        "reach-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
        },
        "push-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
        },
        "pick-place-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        },
        "door-open-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
        },
        "drawer-open-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
        },
        "drawer-close-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
        },
        "button-press-topdown-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
        },
        "peg-insert-side-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
        },
        "window-open-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
        },
        "window-close-v2": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
        }
      },
      "_tasks": [
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        },
        {
          "$type": "metaworld.Task"
        }
      ],
      "_task_indices": {
        "reach-v2": 0,
        "push-v2": 1,
        "pick-place-v2": 2,
        "door-open-v2": 3,
        "drawer-open-v2": 4,
        "drawer-close-v2": 5,
        "button-press-topdown-v2": 6,
        "peg-insert-side-v2": 7,
        "window-open-v2": 8,
        "window-close-v2": 9
      },
      "_task_map": {
        "reach-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "push-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "pick-place-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "door-open-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "drawer-open-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "drawer-close-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "button-press-topdown-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "peg-insert-side-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "window-open-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ],
        "window-close-v2": [
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          },
          {
            "$type": "metaworld.Task"
          }
        ]
      },
      "_task_orders": {
        "reach-v2": "array([39, 24, 47, 46, 40,  6, 12,  3, 48, 43, 17,  1, 10, 34, 20, 25, 23,\n        5, 35, 27, 14,  8, 32, 33, 13, 29, 18, 37,  7, 16, 11, 44,  4, 49,\n       28, 42, 15, 36, 41, 31, 22, 30, 21, 38,  2, 26, 19,  0, 45,  9])",
        "push-v2": "array([ 8, 34, 36, 21, 31, 13, 11, 26, 39, 28, 23, 32, 49, 46, 19, 20, 30,\n       25, 27, 44,  7, 35,  6, 14, 24, 29, 38, 22, 16, 47,  9, 48, 17,  1,\n       41, 10,  2,  3,  4, 43, 18,  5, 40, 37, 45,  0, 33, 42, 12, 15])",
        "pick-place-v2": "array([46, 16, 24, 18, 17,  4, 36, 45, 21, 32, 25, 39, 27, 42, 40, 38,  6,\n        1, 26,  3, 33,  7,  9, 20, 30, 41, 37,  0, 48,  8,  2, 11, 14, 28,\n       23, 31, 13, 22, 12, 34, 47, 49, 43, 19, 44, 29, 35, 15,  5, 10])",
        "door-open-v2": "array([32, 22, 45, 31, 46,  7, 33,  1, 34,  9, 18, 43, 29, 42,  5, 39,  4,\n       38, 48, 30, 24, 20, 44, 19, 27,  3, 25, 10, 13, 15,  2, 21,  6, 36,\n        8, 49, 35, 28, 41, 12, 26, 47, 23,  0, 11, 40, 14, 17, 37, 16])",
        "drawer-open-v2": "array([29, 11, 22,  5, 40, 15, 38,  1, 28, 48, 33, 17, 49, 31, 10,  8, 27,\n       37, 41, 47, 44, 46,  6,  3,  4, 19, 32, 12, 43, 30, 21, 45, 24,  0,\n       25,  9, 13, 35, 20, 18, 42, 39, 26, 36, 14,  7, 23,  2, 16, 34])",
        "drawer-close-v2": "array([42,  3, 46, 48, 16,  4, 32, 19, 38,  6, 27, 30, 33, 36, 18,  8, 31,\n        1, 10, 29, 23, 40, 21,  5, 13, 20,  2, 25, 43, 41, 24, 35, 47, 28,\n       12, 17, 15, 26, 22, 14, 45, 44,  9, 11,  0, 39, 49, 37,  7, 34])",
        "button-press-topdown-v2": "array([34,  1, 38, 16,  9, 15,  6, 14, 21, 17,  0,  5, 31,  3, 46, 20, 27,\n        4, 45, 23, 29,  2, 33, 32,  8, 39, 26, 10, 43, 24, 35, 47, 44, 36,\n       25, 40, 49, 48, 37, 28, 12, 11, 18, 42, 41,  7, 13, 19, 30, 22])",
        "peg-insert-side-v2": "array([21,  0, 36, 17, 27, 38,  7, 42,  4,  5, 13, 22, 28, 47,  9, 35, 29,\n       46, 14, 44, 41, 49, 23, 12, 33, 20, 15, 48, 45, 11, 30, 19,  2,  8,\n       40, 39, 16, 32, 31, 34, 18,  6, 37,  1, 26, 25, 43, 24,  3, 10])",
        "window-open-v2": "array([33, 30, 47, 34, 23, 28, 27, 40, 12, 29, 10, 43,  9, 25, 41,  5, 37,\n        4, 32, 22, 11, 24, 39, 19, 31, 16, 46, 13, 18, 26, 45,  0,  2, 42,\n       21, 49, 15, 14, 17, 20, 36,  8, 44,  6,  3, 38,  1, 48,  7, 35])",
        "window-close-v2": "array([ 5, 30, 11, 47, 49, 18, 44, 23,  8, 35, 25, 20, 28, 36,  9,  0, 38,\n       19, 12, 37, 45, 33, 31,  7, 14, 41, 39, 26, 10, 46, 43, 27, 13, 22,\n       24, 34,  2, 32, 29, 21,  4, 16, 17,  1, 42, 48,  6, 15,  3, 40])"
      },
      "_next_order_index": 2,
      "$type": "garage.experiment.task_sampler.MetaWorldTaskSampler"
    },
    "_test_sampler": {
      "_worker_factory": {
        "n_workers": 10,
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_class": {
          "$typename": "garage.sampler.evaluation_worker.EvalWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_sampler_worker": {
        "__ray_metadata__": "<ray.actor.ActorClassMetadata object at 0x7ff304cd3850>",
        "$type": "garage.sampler.ray_sampler.ActorClass(SamplerWorker)"
      },
      "_agents": {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_log_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "preprocess_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear_layer": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 64,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                      },
                      "nonlinearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "_dendrite_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "dim_context": 64,
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 39.0,
                            "out_features": 512,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "segments": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": "None"
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 64,
                                "out_features": 512,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                      },
                      "1": {
                        "dim_context": 64,
                        "training": true,
                        "_parameters": {},
                        "_buffers": {
                          "zero_mask": {
                            "$type": "torch.Tensor"
                          }
                        },
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "module": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 512,
                            "out_features": 512,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "segments": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": "None"
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 64,
                                "out_features": 512,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "sparsity": 0.0,
                        "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_dendrite_activations": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "inplace": false,
                        "$type": "torch.nn.modules.activation.ReLU"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "output_linear": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 512,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "output_linear": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {
                              "zero_mask": {
                                "$type": "torch.Tensor"
                              }
                            },
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 512,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "sparsity": 0.0,
                            "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "num_segments": 1,
                "input_size": 39.0,
                "hidden_sizes": [
                  512,
                  512
                ],
                "output_sizes": [
                  4.0,
                  4.0
                ],
                "dim_context": 10,
                "kw": false,
                "kw_percent_on": "None",
                "weight_sparsity": 0.0,
                "output_nonlinearity": "None",
                "hardcode_dendrites": false,
                "_single_head": false,
                "representation_dim": 39.0,
                "representation_module": "None",
                "context_representation_dim": 64,
                "$type": "nupic.research.frameworks.dendrites.modules.dendritic_mlp.DendriticMLP"
              }
            },
            "_input_dim": 39.0,
            "_hidden_sizes": [
              512,
              512
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": "None",
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "None",
            "_std_hidden_w_init": "None",
            "_std_hidden_b_init": "None",
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": "None",
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "None",
            "_hidden_w_init": "None",
            "_hidden_b_init": "None",
            "_output_nonlinearity": "None",
            "_output_w_init": "None",
            "_output_b_init": "None",
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_init_std": {
              "$type": "torch.Tensor"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "_n_tasks": 10,
            "$type": "nupic.embodied.modules.gaussian_mlp_module.GaussianTwoHeadedDendriticMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "_input_dim": 39.0,
        "$type": "nupic.embodied.policies.gaussian_mlp_policy.GaussianDendriticMLPPolicy"
      },
      "_envs": [
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        }
      ],
      "_all_workers": {
        "0": "Actor(SamplerWorker, 9d28cb170100)",
        "1": "Actor(SamplerWorker, 15c675b20100)",
        "2": "Actor(SamplerWorker, 8603ac100100)",
        "3": "Actor(SamplerWorker, 276fa5c90100)",
        "4": "Actor(SamplerWorker, 2ca539020100)",
        "5": "Actor(SamplerWorker, 876814b80100)",
        "6": "Actor(SamplerWorker, 7dec85640100)",
        "7": "Actor(SamplerWorker, 0bead1160100)",
        "8": "Actor(SamplerWorker, b944ee5b0100)",
        "9": "Actor(SamplerWorker, 2a124e200100)"
      },
      "_workers_started": true,
      "total_env_steps": 0,
      "$type": "garage.sampler.ray_sampler.RaySampler"
    },
    "_num_tasks": 10,
    "_curr_train_tasks": [
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      }
    ],
    "_task_update_frequency": 1,
    "_epoch_mean_success_rate": [],
    "_epoch_median_success_rate": [],
    "_wandb_logging": true,
    "_evaluation_frequency": 25,
    "$type": "nupic.embodied.algos.custom_mtsac.CustomMTSAC"
  },
  "_env": [
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    }
  ],
  "_sampler": {
    "_worker_factory": {
      "n_workers": 10,
      "_seed": "None",
      "_max_episode_length": 500,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_sampler_worker": {
      "__ray_metadata__": "<ray.actor.ActorClassMetadata object at 0x7ff304ca40d0>",
      "$type": "garage.sampler.ray_sampler.ActorClass(SamplerWorker)"
    },
    "_agents": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_log_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            },
            "max_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_shared_mean_log_std_network": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "preprocess_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear_layer": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 49.0,
                          "out_features": 64,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                    },
                    "nonlinearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                },
                "_dendrite_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "dim_context": 64,
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 39.0,
                          "out_features": 512,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "segments": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": "None"
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 64,
                              "out_features": 512,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                    },
                    "1": {
                      "dim_context": 64,
                      "training": true,
                      "_parameters": {},
                      "_buffers": {
                        "zero_mask": {
                          "$type": "torch.Tensor"
                        }
                      },
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "module": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 512,
                          "out_features": 512,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "segments": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": "None"
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 64,
                              "out_features": 512,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "sparsity": 0.0,
                      "$type": "nupic.research.frameworks.dendrites.modules.dendritic_layers.OneSegmentDendriticLayer"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_dendrite_activations": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "inplace": false,
                      "$type": "torch.nn.modules.activation.ReLU"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "output_linear": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 512,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "output_linear": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {
                            "zero_mask": {
                              "$type": "torch.Tensor"
                            }
                          },
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 512,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "sparsity": 0.0,
                          "$type": "nupic.torch.modules.sparse_weights.SparseWeights"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "num_segments": 1,
              "input_size": 39.0,
              "hidden_sizes": [
                512,
                512
              ],
              "output_sizes": [
                4.0,
                4.0
              ],
              "dim_context": 10,
              "kw": false,
              "kw_percent_on": "None",
              "weight_sparsity": 0.0,
              "output_nonlinearity": "None",
              "hardcode_dendrites": false,
              "_single_head": false,
              "representation_dim": 39.0,
              "representation_module": "None",
              "context_representation_dim": 64,
              "$type": "nupic.research.frameworks.dendrites.modules.dendritic_mlp.DendriticMLP"
            }
          },
          "_input_dim": 39.0,
          "_hidden_sizes": [
            512,
            512
          ],
          "_action_dim": 4.0,
          "_learn_std": true,
          "_std_hidden_sizes": "None",
          "_min_std": 2.061153622438558e-09,
          "_max_std": 7.38905609893065,
          "_std_hidden_nonlinearity": "None",
          "_std_hidden_w_init": "None",
          "_std_hidden_b_init": "None",
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": "None",
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "None",
          "_hidden_w_init": "None",
          "_hidden_b_init": "None",
          "_output_nonlinearity": "None",
          "_output_w_init": "None",
          "_output_b_init": "None",
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
          },
          "_init_std": {
            "$type": "torch.Tensor"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": {
            "$type": "torch.Tensor"
          },
          "_n_tasks": 10,
          "$type": "nupic.embodied.modules.gaussian_mlp_module.GaussianTwoHeadedDendriticMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianPolicy",
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "_input_dim": 39.0,
      "$type": "nupic.embodied.policies.gaussian_mlp_policy.GaussianDendriticMLPPolicy"
    },
    "_envs": [
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      }
    ],
    "_all_workers": {
      "0": "Actor(SamplerWorker, 45b95b1c0100)",
      "1": "Actor(SamplerWorker, ef0a6c220100)",
      "2": "Actor(SamplerWorker, f66d17ba0100)",
      "3": "Actor(SamplerWorker, 44ee453c0100)",
      "4": "Actor(SamplerWorker, 7e0a4dfc0100)",
      "5": "Actor(SamplerWorker, 6f53dca10100)",
      "6": "Actor(SamplerWorker, 6170691e0100)",
      "7": "Actor(SamplerWorker, cd8f56890100)",
      "8": "Actor(SamplerWorker, 55c3b2b60100)",
      "9": "Actor(SamplerWorker, 9fc77bf30100)"
    },
    "_workers_started": true,
    "total_env_steps": 0,
    "$type": "garage.sampler.ray_sampler.RaySampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}